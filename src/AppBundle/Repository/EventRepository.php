<?php

namespace AppBundle\Repository;

use AppBundle\Entity\EventPlace;
use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{

    /**
     * Return events by event place or event by
     * event place filtered by dates.
     *
     * @param EventPlace $eventPlace
     * @param \DateTime|null $dateEnd
     * @param \DateTime|null $dateStart
     * @return array|mixed
     */
    public function getEventsByDates(EventPlace $eventPlace, \DateTime $dateStart = null, \DateTime $dateEnd = null)
    {
        /** @var EventPlace $place */
        $events = $this->createQueryBuilder('e')
            ->where('e.eventPlace = :eventPlace')
            ->setParameter(':eventPlace', $eventPlace)
            ->getQuery()
            ->getResult();

        if (!$dateEnd || !$dateStart) {
            return $events;
        }

        $filteredEvents = [];
        return  array_filter($events, function($event) use ($dateStart, $dateEnd, $filteredEvents) {
            $eventStart = (new \DateTime())->setTimestamp($event->getDates()[0]);
            $eventEnd = (new \DateTime())->setTimestamp($event->getDates()[1]);
            if ( $eventStart >= $dateStart && $eventEnd <= $dateEnd) {
                $filteredEvents[] = $event;
            }
            return $filteredEvents;
        });
    }

    /**
     * Return all events or all events filtered dates.
     *
     * @param \DateTime|null $dateEnd
     * @param \DateTime|null $dateStart
     * @return array|mixed
     */
    public function getAllEventsByDates(\DateTime $dateStart = null, \DateTime $dateEnd = null)
    {
        $events = $this->createQueryBuilder('e')->getQuery()->getResult();

        if (!$dateEnd || !$dateStart) {
            return $events;
        }

        $filteredEvents = [];
        return  array_filter($events, function($event) use ($dateStart, $dateEnd, $filteredEvents) {
            $eventStart = (new \DateTime())->setTimestamp($event->getDates()[0]);
            $eventEnd = (new \DateTime())->setTimestamp($event->getDates()[1]);
            if ( $eventStart >= $dateStart && $eventEnd <= $dateEnd) {
                $filteredEvents[] = $event;
            }
            return $filteredEvents;
        });
    }
}
